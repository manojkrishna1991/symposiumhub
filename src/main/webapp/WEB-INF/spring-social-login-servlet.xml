<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                     http://www.springframework.org/schema/data/mongo
                     http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
                    http://www.springframework.org/schema/security
                    http://www.springframework.org/schema/security/spring-security.xsd
                      http://www.springframework.org/schema/websocket
                    http://www.springframework.org/schema/websocket/spring-websocket.xsd
                  
                 ">


    
    
		<bean id="projectPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:application.properties</value>
		</property>
	</bean>
	
	

  
	<!-- data source, sessionfactory, hiberate template & transaction manager -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    </bean>
	<bean id="loginSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.spring.security.social.login.example" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">
					${hibernate.hbm2ddl.auto}
				</prop>
				<prop key="hibernate.show_sql">
					${hibernate.show.sql}
				</prop>
			</props>
		</property>
	</bean>
    
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="loginSessionFactory"/>
    </bean> 

	


	<!-- authentication manager and its provider( social provider deals with 
		social login & local user provider deals with form login ) -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="socialAuthenticationProvider" />
		<security:authentication-provider
			user-service-ref="localUserDetailService" />
	</security:authentication-manager>

	<bean id="socialAuthenticationProvider"
		class="org.springframework.social.security.SocialAuthenticationProvider">
		<constructor-arg ref="inMemoryUsersConnectionRepository" />
		<constructor-arg ref="socialUserDetailService" />
	</bean>

	<!-- form login beans -->
	<bean id="appAuthenticationEntryPoint"
		class="com.spring.security.social.login.example.entrypoint.AppAuthenticationEntryPoint">
		<constructor-arg name="loginFormUrl" value="/login" />
	</bean>
	<bean id="rememberMeServices"
		class="org.springframework.security.web.authentication.NullRememberMeServices" />
	<bean id="successHandler"
		class="com.spring.security.social.login.example.handler.AppSuccessHandler" />
	<bean id="failureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<constructor-arg name="defaultFailureUrl" value="/accessdenied" />
	</bean>
	<bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg name="logoutSuccessHandler" ref="logoutSuccessHandler" />
		<constructor-arg name="handlers">
			<list>
				<bean name="securityContextLogoutHandler"
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="logoutSuccessHandler"
		class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler" />
	<bean
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
		id="SecurityAuthFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="successHandler" />		
		<property name="authenticationFailureHandler" ref="failureHandler" />
		<property name="filterProcessesUrl" value="/j_spring_security_check" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>


	<!-- Anyone can access these urls -->
	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/addcokieforredirection/**"
		security="none" />
	<security:http pattern="/Images/**" security="none" />
	<security:http pattern="/accessdenied" security="none" />
	<security:http pattern="/http/**" security="none"/>
	<security:http disable-url-rewriting="true"
		use-expressions="true" entry-point-ref="appAuthenticationEntryPoint">

<security:intercept-url pattern="/login**"
			access="permitAll" />
<security:intercept-url pattern="/signup**"
			access="permitAll" />
		<security:intercept-url pattern="/user/register**"
			access="permitAll" />
		<security:intercept-url pattern="/viewsymposium/**"
			access="permitAll" />
		<security:intercept-url pattern="/viewconference/**"
			access="permitAll" />
		<security:intercept-url pattern="/symposiumview/**"
			access="permitAll" />
		<security:intercept-url pattern="/auth/**"
			access="permitAll" />
		<security:intercept-url pattern="/registerforsymposium"
			access="permitAll" />
		<security:intercept-url pattern="/j_spring_security_check"
			access="permitAll" />
		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/subscribeemail"
			access="permitAll" />
		<security:intercept-url pattern="/multilogin"
			access="permitAll" />
			<security:intercept-url pattern="/uploadpapers"
			access="permitAll" />
			<security:intercept-url pattern="/postcomment"
			access="permitAll" />
			
			<security:intercept-url pattern="/aboutus"
			access="permitAll" />
				
		<security:intercept-url pattern="/**"
			access="isAuthenticated()" />
			
      <security:session-management>
        <security:concurrency-control
            session-registry-ref="sessionRegistry" max-sessions="1" expired-url="/login?message=&quot;multiple sessions not allowed&quot; " />
    </security:session-management>

		<!-- Adds social authentication filter to the Spring Security filter chain. -->
		<security:custom-filter before="PRE_AUTH_FILTER"
			ref="socialAuthenticationFilter" />
		<security:custom-filter position="FORM_LOGIN_FILTER"
			ref="SecurityAuthFilter" />
		<security:custom-filter position="LOGOUT_FILTER"
			ref="logoutFilter" />
	</security:http>

	<!-- social login filter which is a/services pre authentication filter and 
		works for /auth service url -->
	<bean id="socialAuthenticationFilter"
		class="org.springframework.social.security.SocialAuthenticationFilter">
		<constructor-arg name="authManager" ref="authenticationManager" />
		<constructor-arg name="userIdSource" ref="userIdSource" />
		<constructor-arg name="usersConnectionRepository"
			ref="inMemoryUsersConnectionRepository" />
		<constructor-arg name="authServiceLocator"
			ref="appSocialAuthenticationServiceRegistry" />
		<property name="authenticationSuccessHandler" ref="successHandler" />
	</bean>


	<!-- inmemory connection repository which holds connection repository per 
		local user -->
	<bean id="inMemoryUsersConnectionRepository"
		class="org.springframework.social.connect.mem.InMemoryUsersConnectionRepository">
		<constructor-arg name="connectionFactoryLocator"
			ref="appSocialAuthenticationServiceRegistry" />
		<property name="connectionSignUp" ref="connectionSignUp" />
	</bean>

	<!-- service registry will holds connection factory of each social provider -->
	<bean id="appSocialAuthenticationServiceRegistry"
		class="com.spring.security.social.login.example.registry.AppSocialAuthenticationServiceRegistry">
		<constructor-arg>
			<list>
				<ref bean="facebookAuthenticationService" />
				<ref bean="twitterAuthenticationService" />
				<ref bean="linkedInAuthenticationService" />
				<ref bean="googleAuthenticationService" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="facebookAuthenticationService"
		class="org.springframework.social.facebook.security.FacebookAuthenticationService">
		<constructor-arg name="apiKey" value="${facebook.api.key}" />
		<constructor-arg name="appSecret" value="${facebook.api.secret}" />
		<property name="defaultScope" value="public_profile,email" />

	</bean>

	<bean id="twitterAuthenticationService"
		class="org.springframework.social.twitter.security.TwitterAuthenticationService">
		<constructor-arg name="apiKey" value="${twitter.api.key}" />
		<constructor-arg name="appSecret" value="${twitter.api.secret}" />
	</bean>

	<bean id="linkedInAuthenticationService"
		class="org.springframework.social.linkedin.security.LinkedInAuthenticationService">
		<constructor-arg name="apiKey" value="${linkedin.api.key}" />
		<constructor-arg name="appSecret" value="${linkedin.api.secret}" />
	</bean>

	<bean id="googleAuthenticationService"
		class="org.springframework.social.google.security.GoogleAuthenticationService">
		<constructor-arg name="apiKey" value="${google.api.key}" />
		<constructor-arg name="appSecret" value="${google.api.secret}" />
	</bean>

	<bean id="userIdSource"
		class="org.springframework.social.security.AuthenticationNameUserIdSource" />

	<!-- If no local user is associated to a social connection then connection 
		sign up will create a new local user and map it to social user -->
	<bean id="connectionSignUp"
		class="com.spring.security.social.login.example.registry.AppConnectionSignUp" />

	<mongo:mongo host="127.0.0.1" port="27017" />
	<mongo:db-factory dbname="yourdb" />

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
	</bean>




  


	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<constructor-arg name="objectMapper" ref="jacksonObjectMapper" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="jacksonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />
	




</beans>